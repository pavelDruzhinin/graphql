// <auto-generated />
using System;
using GraphQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GraphQL.Data.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GraphQL.Data.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BlogCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Category 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Category 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Category 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Category 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Category 5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Category 6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Category 7"
                        });
                });

            modelBuilder.Entity("GraphQL.Data.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedUtcDateTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Body 1",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7220),
                            Title = "Title 1"
                        },
                        new
                        {
                            Id = 2,
                            Body = "Body 2",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7670),
                            Title = "Title 2"
                        },
                        new
                        {
                            Id = 3,
                            Body = "Body 3",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7680),
                            Title = "Title 3"
                        },
                        new
                        {
                            Id = 4,
                            Body = "Body 4",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7680),
                            Title = "Title 4"
                        },
                        new
                        {
                            Id = 5,
                            Body = "Body 5",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7680),
                            Title = "Title 5"
                        },
                        new
                        {
                            Id = 6,
                            Body = "Body 6",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7680),
                            Title = "Title 6"
                        },
                        new
                        {
                            Id = 7,
                            Body = "Body 7",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7680),
                            Title = "Title 7"
                        },
                        new
                        {
                            Id = 8,
                            Body = "Body 8",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7680),
                            Title = "Title 8"
                        },
                        new
                        {
                            Id = 9,
                            Body = "Body 9",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7680),
                            Title = "Title 9"
                        },
                        new
                        {
                            Id = 10,
                            Body = "Body 10",
                            CreatedUtcDateTime = new DateTime(2019, 3, 4, 17, 1, 36, 584, DateTimeKind.Utc).AddTicks(7680),
                            Title = "Title 10"
                        });
                });

            modelBuilder.Entity("GraphQL.Data.BlogsCategories", b =>
                {
                    b.Property<int>("BlogPostId");

                    b.Property<int>("CategoryId");

                    b.Property<int?>("BlogPostId1");

                    b.HasKey("BlogPostId", "CategoryId");

                    b.HasIndex("BlogPostId1");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogsCategories");

                    b.HasData(
                        new
                        {
                            BlogPostId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            BlogPostId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            BlogPostId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            BlogPostId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            BlogPostId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            BlogPostId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            BlogPostId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            BlogPostId = 2,
                            CategoryId = 6
                        },
                        new
                        {
                            BlogPostId = 2,
                            CategoryId = 7
                        },
                        new
                        {
                            BlogPostId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            BlogPostId = 9,
                            CategoryId = 7
                        });
                });

            modelBuilder.Entity("GraphQL.Data.BlogsCategories", b =>
                {
                    b.HasOne("GraphQL.Data.BlogPost", "BlogPost")
                        .WithMany()
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GraphQL.Data.BlogPost")
                        .WithMany("Categories")
                        .HasForeignKey("BlogPostId1");

                    b.HasOne("GraphQL.Data.BlogCategory", "Category")
                        .WithMany("BlogPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
